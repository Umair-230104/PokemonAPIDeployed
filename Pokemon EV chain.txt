Pokemon EV chain

import React, { useState, useEffect } from "react";
import { useParams, useNavigate, useLocation } from "react-router-dom";

function PokemonCard() {
  const { id } = useParams();
  const navigate = useNavigate();
  const location = useLocation();
  const [pokemon, setPokemon] = useState(null);
  const [evolutions, setEvolutions] = useState([]);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState(null);

  useEffect(() => {
    setIsLoading(true);
    fetch(`https://pokeapi.co/api/v2/pokemon/${id}`)
      .then((res) => {
        if (!res.ok) {
          throw new Error("Failed to fetch Pokémon data");
        }
        return res.json();
      })
      .then((data) => {
        setPokemon(data);
        return fetch(data.species.url);
      })
      .then((res) => {
        if (!res.ok) {
          throw new Error("Failed to fetch Pokémon species data");
        }
        return res.json();
      })
      .then((speciesData) => fetch(speciesData.evolution_chain.url))
      .then((res) => {
        if (!res.ok) {
          throw new Error("Failed to fetch evolution chain data");
        }
        return res.json();
      })
      .then((evolutionData) => parseEvolutionChain(evolutionData.chain))
      .then((evolutionList) => setEvolutions(evolutionList))
      .catch((err) => setError(err.message))
      .finally(() => setIsLoading(false));
  }, [id]);

  const parseEvolutionChain = (chain) => {
    const evolutionList = [];
    let current = chain;

    while (current) {
      evolutionList.push(current.species.name);
      current = current.evolves_to[0];
    }

    return Promise.all(
      evolutionList.map((name) =>
        fetch(`https://pokeapi.co/api/v2/pokemon/${name}`)
          .then((res) => res.json())
          .then((data) => ({
            name,
            image: data.sprites?.other?.["official-artwork"]?.front_default || null,
          }))
      )
    );
  };

  const pageStyle = {
    background: "linear-gradient(180deg, #f7e669, #ffcb05)",
    color: "#2a75bb",
    minHeight: "100vh",
    padding: "20px",
    fontFamily: "'Press Start 2P', sans-serif",
    display: "flex",
    flexDirection: "column",
    alignItems: "center",
    justifyContent: "center",
  };

  const boxStyle = {
    border: "2px solid #2a75bb",
    borderRadius: "10px",
    padding: "20px",
    maxWidth: "600px",
    textAlign: "center",
    boxShadow: "0 4px 8px rgba(0, 0, 0, 0.2)",
    backgroundColor: "#fff",
  };

  const evolutionListStyle = {
    display: "flex",
    flexDirection: "row",
    justifyContent: "center",
    gap: "20px",
    marginTop: "20px",
  };

  const evolutionItemStyle = {
    textAlign: "center",
  };

  const imageStyle = {
    width: "100px",
    height: "100px",
    objectFit: "contain",
    border: "1px solid #cc0000",
    borderRadius: "5px",
    backgroundColor: "#fff",
  };

  const buttonStyle = {
    marginTop: "20px",
    padding: "10px 20px",
    fontSize: "16px",
    backgroundColor: "#2a75bb",
    color: "#fff",
    border: "none",
    borderRadius: "8px",
    cursor: "pointer",
  };

  if (isLoading) {
    return <div style={pageStyle}><p>Loading...</p></div>;
  }

  if (error) {
    return <div style={pageStyle}><p style={{ color: "red" }}>{error}</p></div>;
  }

  const sprites = pokemon.sprites?.other?.["official-artwork"];

  return (
    <div style={pageStyle}>
      <div style={boxStyle}>
        <h1>{pokemon.name.toUpperCase()}</h1>
        <img
          src={sprites?.front_default || ""}
          alt={pokemon.name}
          style={{ width: "200px", height: "200px", objectFit: "contain" }}
        />
        <p>Height: {pokemon.height}</p>
        <p>Weight: {pokemon.weight}</p>
        <p>
          Types: {pokemon.types.map((type) => type.type.name).join(", ")}
        </p>

        {evolutions.length > 0 ? (
          <div>
            <h2>Evolution Chain</h2>
            <div style={evolutionListStyle}>
              {evolutions.map((evolution, index) => (
                <div key={index} style={evolutionItemStyle}>
                  {evolution.image ? (
                    <img
                      src={evolution.image}
                      alt={evolution.name}
                      style={imageStyle}
                    />
                  ) : (
                    <p>No Image</p>
                  )}
                  <p>{evolution.name.toUpperCase()}</p>
                </div>
              ))}
            </div>
          </div>
        ) : (
          <p>No evolutions available for this Pokémon.</p>
        )}

        <button
          onClick={() => navigate("/search", { state: location.state })}
          style={buttonStyle}
        >
          Back to Search
        </button>
      </div>
    </div>
  );
}

export default PokemonCard;
